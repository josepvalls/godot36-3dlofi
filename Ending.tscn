[gd_scene load_steps=16 format=2]

[ext_resource path="res://shader/dither.shader" type="Shader" id=1]
[ext_resource path="res://assets/bayer2tile16.png" type="Texture" id=2]
[ext_resource path="res://assets/my-blues.png" type="Texture" id=3]
[ext_resource path="res://tiles/15.jpeg" type="Texture" id=4]
[ext_resource path="res://models/Ending3D.tscn" type="PackedScene" id=5]
[ext_resource path="res://assets/bayer16tile2.png" type="Texture" id=6]
[ext_resource path="res://assets/my-purples.png" type="Texture" id=7]
[ext_resource path="res://Ship.tscn" type="PackedScene" id=8]

[sub_resource type="ShaderMaterial" id=1]
shader = ExtResource( 1 )
shader_param/u_bit_depth = 32
shader_param/u_contrast = 1.0
shader_param/u_offset = null
shader_param/u_dither_size = 1
shader_param/u_dither_tex = ExtResource( 2 )
shader_param/u_color_tex = ExtResource( 3 )

[sub_resource type="ViewportTexture" id=2]
viewport_path = NodePath("Viewport")

[sub_resource type="Shader" id=6]
code = "/* 
This shader is under MIT license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

uniform sampler2D u_dither_tex;
uniform sampler2D u_color_tex;

uniform int u_bit_depth;
uniform float u_contrast;
uniform float u_offset;
uniform int u_dither_size;
uniform vec4 u_color: hint_color; 

void fragment() 
{
	// sample the screen texture at the desired output resolution (according to u_dither_size)
	// this will effectively pixelate the resulting output
	vec2 screen_size = vec2(textureSize(TEXTURE, 0)) / float(u_dither_size);
	vec2 screen_sample_uv = floor(UV * screen_size) / screen_size;
	vec3 screen_col = texture(TEXTURE, screen_sample_uv).rgb;
	
	// calculate pixel luminosity (https://stackoverflow.com/questions/596216/formula-to-determine-brightness-of-rgb-color)
	float lum = (screen_col.r * 0.299) + (screen_col.g * 0.587) + (screen_col.b * 0.114);
	
	// adjust with contrast and offset parameters
	float contrast = u_contrast;
	lum = (lum - 0.5 + u_offset) * contrast + 0.5;
	lum = clamp(lum, 0.0, 1.0);
	
	// reduce luminosity bit depth to give a more banded visual if desired	
	float bits = float(u_bit_depth);
	lum = floor(lum * bits) / bits;
	
	// to support multicolour palettes, we want to dither between the two colours on the palette
	// which are adjacent to the current pixel luminosity.
	// to do this, we need to determine which 'band' lum falls into, calculate the upper and lower
	// bound of that band, then later we will use the dither texture to pick either the upper or 
	// lower colour.
	
	// get the palette texture size mapped so it is 1px high (so the x value however many colour bands there are)
	ivec2 col_size = textureSize(u_color_tex, 0);
	col_size /= col_size.y;
	
	float col_x = float(col_size.x) - 1.0; // colour boundaries is 1 less than the number of colour bands
	float col_texel_size = 1.0 / col_x; // the size of one colour boundary
	
	lum = max(lum - 0.00001, 0.0); // makes sure our floor calculation below behaves when lum == 1.0
	float lum_lower = floor(lum * col_x) * col_texel_size;
	float lum_upper = (floor(lum * col_x) + 1.0) * col_texel_size;
	float lum_scaled = lum * col_x - floor(lum * col_x); // calculates where lum lies between the upper and lower bound
	
	// map the dither texture onto the screen. there are better ways of doing this that makes the dither pattern 'stick'
	// with objects in the 3D world, instead of being mapped onto the screen. see lucas pope's details posts on how he 
	// achieved this in Obra Dinn: https://forums.tigsource.com/index.php?topic=40832.msg1363742#msg1363742
	ivec2 noise_size = textureSize(u_dither_tex, 0);
	vec2 inv_noise_size = vec2(1.0 / float(noise_size.x), 1.0 / float(noise_size.y));
	vec2 noise_uv = UV * inv_noise_size * vec2(float(screen_size.x), float(screen_size.y));
	float threshold = texture(u_dither_tex, noise_uv).r;
	
	// adjust the dither slightly so min and max aren't quite at 0.0 and 1.0
	// otherwise we wouldn't get fullly dark and fully light dither patterns at lum 0.0 and 1.0
	threshold = threshold * 0.99 + 0.005;
	
	// the lower lum_scaled is, the fewer pixels will be below the dither threshold, and thus will use the lower bound colour,
	// and vice-versa
	float ramp_val = lum_scaled < threshold ? 0.0f : 1.0f;
	// sample at the lower bound colour if ramp_val is 0.0, upper bound colour if 1.0
	float col_sample = mix(lum_lower, lum_upper, ramp_val);
	vec3 final_col = texture(u_color_tex, vec2(col_sample, 0.5)).rgb;
	
	// return the final colour!
	COLOR.rgb = final_col;
	COLOR.rgba = u_color;
	COLOR.a = col_sample;//ceil(texture(TEXTURE, screen_sample_uv).a);
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/u_bit_depth = 8
shader_param/u_contrast = 1.0
shader_param/u_offset = 0.0
shader_param/u_dither_size = 1
shader_param/u_color = Color( 0.733333, 0.733333, 0.8, 1 )
shader_param/u_dither_tex = ExtResource( 6 )
shader_param/u_color_tex = ExtResource( 7 )

[sub_resource type="ViewportTexture" id=5]
viewport_path = NodePath("TextureRect/Viewport2")

[sub_resource type="ShaderMaterial" id=4]
shader = ExtResource( 1 )
shader_param/u_bit_depth = 32
shader_param/u_contrast = 1.0
shader_param/u_offset = null
shader_param/u_dither_size = 1
shader_param/u_dither_tex = ExtResource( 6 )
shader_param/u_color_tex = ExtResource( 7 )

[sub_resource type="ViewportTexture" id=8]
viewport_path = NodePath("TextureRect2/Viewport2")

[node name="Node2D" type="Node2D"]

[node name="TextureRectBackground" type="TextureRect" parent="."]
material = SubResource( 1 )
margin_right = 1024.0
margin_bottom = 600.0
texture = SubResource( 2 )
expand = true
flip_v = true

[node name="16" type="Sprite" parent="."]
position = Vector2( 1940, 158 )
scale = Vector2( 0.25, 0.25 )
texture = ExtResource( 4 )
centered = false

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 256, 150 )
own_world = true

[node name="15" type="Sprite" parent="Viewport"]
position = Vector2( 0, -30 )
scale = Vector2( 0.25, 0.25 )
texture = ExtResource( 4 )
centered = false

[node name="TextureRect" type="TextureRect" parent="."]
material = SubResource( 7 )
margin_right = 1024.0
margin_bottom = 600.0
texture = SubResource( 5 )
expand = true
flip_v = true

[node name="Viewport2" type="Viewport" parent="TextureRect"]
size = Vector2( 256, 150 )
transparent_bg = true

[node name="Spatial" parent="TextureRect/Viewport2" instance=ExtResource( 5 )]

[node name="TextureRect2" type="TextureRect" parent="."]
material = SubResource( 4 )
margin_right = 1024.0
margin_bottom = 600.0
texture = SubResource( 8 )
expand = true
flip_v = true

[node name="Viewport2" type="Viewport" parent="TextureRect2"]
size = Vector2( 256, 150 )
transparent_bg = true

[node name="Ship" parent="TextureRect2/Viewport2" instance=ExtResource( 8 )]
